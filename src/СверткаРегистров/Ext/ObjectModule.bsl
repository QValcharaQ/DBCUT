#Область ПрограммныйИнтерфейс


Процедура УстановитьПометкуТЧ(ТЧ,ЗначениеПометки) Экспорт
	Для каждого СтрокаТЧ Из ТЧ Цикл
		СтрокаТЧ.Пометка=ЗначениеПометки;
	КонецЦикла; 
КонецПроцедуры
 

//====================================================================================================================== 
// 
Процедура ЗаполнитьРегистрыБухгалтерии()  Экспорт
	Для каждого МДРБ Из Метаданные.РегистрыБухгалтерии  Цикл
		СтрокаРБ=РегистрыБухгалтерииСписок.Добавить();
		СтрокаРБ.пометка=Ложь;
		СтрокаРБ.Регистр=МДРБ.Имя;
		СтрокаРБ.Синоним=МДРБ.Синоним;   
		СтрокаРБ.Регистратор=УниверсальныйРегистратор(МДРБ);
		СтрокаРБ.КоррСчет=ВспомогательныйСчет(МДРБ);
	КонецЦикла; 
КонецПроцедуры

Процедура ЗаполнитьРегистрыНакопления()  Экспорт
	ВидРНОстатки=Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
	Для каждого МДРН Из Метаданные.РегистрыНакопления Цикл
		Если МДРН.ВидРегистра=ВидРНОстатки Тогда
			ТЧ=РегистрыНакопленияОстаткиСписок;
			СтрокаРН=ТЧ.Добавить();
			СтрокаРН.Регистратор=УниверсальныйРегистратор(МДРН);
		Иначе	
			ТЧ=РегистрыНакопленияОборотыСписок;
			СтрокаРН=ТЧ.Добавить();
		КонецЕсли; 
		СтрокаРН.пометка=Ложь;
		СтрокаРН.Регистр=МДРН.Имя;
		СтрокаРН.Синоним=МДРН.Синоним;    
		
	КонецЦикла; 
КонецПроцедуры

Процедура ЗаполнитьРегистрыСведений()  Экспорт
	Непериодичность=Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	Для каждого МДРС Из Метаданные.РегистрыСведений Цикл
		Если МДРС.ПериодичностьРегистраСведений <> Непериодичность Тогда
			СтрокаРН=РегистрыСведенийСписок.Добавить();
			СтрокаРН.пометка=Ложь;
			СтрокаРН.Регистр=МДРС.Имя;
			СтрокаРН.Синоним=МДРС.Синоним;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

Процедура ЗаполнитьДокументы()  Экспорт
	Для каждого МДД Из Метаданные.Документы Цикл
		СтрокаД=ДокументыСписок.Добавить();
		СтрокаД.Пометка=Ложь;
		СтрокаД.Документ=МДД.Имя;
		СтрокаД.Синоним=МДД.Синоним;
	КонецЦикла; 
КонецПроцедуры


//====================================================================================================================== 
//создаются документы на каждый счет по организациям
// Параметры Регистр - Структура : 
// 		              	Регистр - объект метаданных регистра бухгалтерии
// 	                  	КоррСчет - ПланСчетовСсылка,  вспомогательный балансовый счет  без аналитики
// 	                  ТекстСКЛЗАпроса - текстовый документ
Процедура СвернутьРегистрБухгалтерии(Регистр,ТекстСКЛЗАпроса) Экспорт
	МДРегистра=Метаданные.РегистрыБухгалтерии[Регистр.Регистр];
	ИДРегистра=МДРегистра.Имя;
	МВТ=Новый МенеджерВременныхТаблиц;
	ИнициализироватьЗапросПоРБ(Регистр,МВТ);
	МенеджерРегистратора= Документы[Регистр.Регистратор];
	
	Запрос = ЗапросДляОбходаРБ(МВТ);
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда
		СтркутураХраненияРБ(МДРегистра,ТекстСКЛЗАпроса);			
	КонецЕсли;  
	//предполагаем что организация есть всегда, но может быть и не так
	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ТекОрганизация =  ВыборкаОрганизация.Организация;
		ВыборкаСчет = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСчет.Следующий() Цикл
			ТекСчет=ВыборкаСчет.Счет;
			ДокументПереноса = МенеджерРегистратора.СоздатьДокумент();      
			ДанныеЗаполнения=Новый Структура("Комментарий,Организация,Дата");
			ДанныеЗаполнения.Организация=ТекОрганизация;
			ДанныеЗаполнения.Комментарий = "Свертка РБ" + ИДРегистра + " по "+ТекСчет+" на " + ДатаНачалаНовогоПериода; 
			ДанныеЗаполнения.Дата = ДатаНачалаНовогоПериода;
			ДокументПереноса.Заполнить(ДанныеЗаполнения);
			// обработка заполнения есть не везде, поэтому заполним принудительно
			ЗаполнитьЗначенияСвойств(ДокументПереноса,ДанныеЗаполнения);
			//Это для обычной корректировки регистров, она не везде есть и не везде такая как нужно.
			//CR001951 
			//ДокументПереноса.ТаблицаРегистровБухгалтерии.Очистить();
			//РБ = ДокументПереноса.ТаблицаРегистровБухгалтерии.Добавить();
			//РБ.Имя = ИДРегистра;
			//РБ.Представление = МДРегистра.Синоним;
			
			НачатьТранзакцию();      
			ДокументПереноса.обменДанными.Загрузка=Истина;
			ДокументПереноса.Записать();
			ТаблицаОстатков=ОстаткиРБПоСчету(Регистр,ТекСчет,ТекОрганизация,МВТ);   
			ТаблицаОстатков.ЗаполнитьЗначения(ДокументПереноса.Ссылка,"Регистратор");
			НаборЗаписей = РегистрыБухгалтерии[ИДРегистра].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументПереноса.Ссылка);
			НаборЗаписей.ОбменДанными.Загрузка=Истина;
			НаборЗаписей.загрузить(ТаблицаОстатков);
			НаборЗаписей.Записать();
			Если Записывать Тогда
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьДокументыДляРБ(ТекстСКЛЗАпроса)  Экспорт
	НачалоЗапросаSQL(ТекстСКЛЗАпроса);
	Для каждого РБ  Из РегистрыБухгалтерииСписок Цикл
		Если РБ.Пометка Тогда
			СвернутьРегистрБухгалтерии(РБ,ТекстСКЛЗАпроса);
		КонецЕсли;
	КонецЦикла;
	КонецЗАпросаSQL(ТекстСКЛЗАпроса);
КонецПроцедуры

Процедура СформироватьДокументыДляРНОстатки(ТекстСКЛЗАпроса) Экспорт
	НачалоЗапросаSQL(ТекстСКЛЗАпроса);
	Для каждого РН  Из РегистрыНакопленияОстаткиСписок Цикл
		Если РН.Пометка Тогда
			СвернутьРегистрНакопления(РН,ТекстСКЛЗАпроса);
		КонецЕсли;
	КонецЦикла;
	КонецЗапросаSQL(ТекстСКЛЗАпроса);
КонецПроцедуры

Процедура СформироватьЗапросРНОбороты(ТекстСКЛЗАпроса)  Экспорт
	НачалоЗапросаSQL(ТекстСКЛЗАпроса);
	Для каждого РН  Из РегистрыНакопленияОборотыСписок Цикл
		Если РН.Пометка Тогда
			 ДополнитьЗапросРНОбороты(РН,ТекстСКЛЗАпроса);
		КонецЕсли; 
	КонецЦикла;
	КонецЗапросаSQL(ТекстСКЛЗАпроса);
КонецПроцедуры

Процедура СформироватьЗапросРС(ТекстСКЛЗАпроса) Экспорт
	Для каждого РС  Из РегистрыСведенийСписок Цикл
		Если рс.Пометка Тогда
			НачалоЗапросаSQL(ТекстСКЛЗАпроса);
			ДополнитьЗапросНезависимыйРС(РС,ТекстСКЛЗАпроса);
			КонецЗапросаSQL(ТекстСКЛЗАпроса);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьТЧДокументов(ТекстСКЛЗАпроса) Экспорт
	Для каждого ДОК  Из ДокументыСписок Цикл
		Если ДОК.Пометка Тогда
			НачалоЗапросаSQL(ТекстСКЛЗАпроса);
			ДополнитьЗапросТЧДокумента(ДОК,ТекстСКЛЗАпроса);
			КонецЗапросаSQL(ТекстСКЛЗАпроса);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры



Процедура ПересчитатьИтогиРНОбороты() Экспорт
	ПересчитатьИтогиРН(РегистрыНакопленияОборотыСписок);
КонецПроцедуры

Процедура ПересчитатьИтогиРНОстатки() Экспорт
	ПересчитатьИтогиРН(РегистрыНакопленияОстаткиСписок);
КонецПроцедуры

Процедура СвернутьРегистрНакопления(СтрокаРегистра,ТекстЗапроса)
	ИДРегистра=СтрокаРегистра.Регистр;
	МДРегистра=Метаданные.РегистрыНакопления[ИДРегистра];
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаНовогоПериода);
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	&ДатаНачала КАК Период,
		|	Истина КАК Активность,
		|	*
		|ИЗ
		|	РегистрНакопления."+ ИДРегистра+".Остатки(&ДатаНачала,) КАК Остатки";

	Результат = Запрос.Выполнить().Выгрузить();
	
	Если  Результат.Количество() >0 Тогда
		Для Каждого КолонкаРезультата Из Результат.Колонки Цикл
			Окончание = Прав(КолонкаРезультата.Имя, 7);
			Если Окончание = "Остаток" Тогда
				КолонкаРезультата.Имя = СтрЗаменить(КолонкаРезультата.Имя, Окончание, "");
			КонецЕсли;
		КонецЦикла;
		
		ДокументПереноса = Документы[СтрокаРегистра.Регистратор].СоздатьДокумент();
		ДанныеЗаполнения=Новый Структура("Комментарий,Дата");
		ДанныеЗаполнения.Комментарий = "Свертка РН " + СтрокаРегистра.Синоним + " на " + ДатаНачалаНовогоПериода; 
		ДанныеЗаполнения.Дата = ДатаНачалаНовогоПериода;
		ДокументПереноса.Заполнить(ДанныеЗаполнения);
		// обработка заполнения есть не везде, поэтому заполним принудительно
		ЗаполнитьЗначенияСвойств(ДокументПереноса,ДанныеЗаполнения);
		//это специфическое для конфигураций
		//ДокументПереноса.ТаблицаРегистровНакопления.Очистить();
		//РН = ДокументПереноса.ТаблицаРегистровНакопления.Добавить();
		//РН.Имя = ИДРегистра;
		//РН.Представление = ИДРегистра;
		
		ДокументПереноса.обменданными.Загрузка=Истина;
		НачатьТранзакцию();
		Попытка
			ДокументПереноса.Записать();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки= ОписаниеОшибки();
			Вызватьисключение "Ошибка обработки РН : "+СтрокаРегистра.Регистр+ " "+ТекстОшибки;
		КонецПопытки;
		
		НаборЗаписей = РегистрыНакопления[ИДРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументПереноса.Ссылка);
		НаборЗаписей.ОбменДанными.Загрузка=Истина;
		НаборЗаписей.Загрузить(Результат);
		Попытка
			НаборЗаписей.Записать();
			Если Записывать Тогда
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли; 
		Исключение                 
			ОтменитьТранзакцию();
			ТекстОшибки= ОписаниеОшибки();
			Вызватьисключение "Ошибка обработки РН : "+СтрокаРегистра.Регистр+ " "+ТекстОшибки;
		КонецПопытки;
		
		СтруктураХраненияРНОстатки(МДРегистра,ТекстЗапроса);
		
	КонецЕсли; 
КонецПроцедуры

Процедура ПересчитатьИтогиРН(СписокРН)  Экспорт
	Для каждого РН Из СписокРН Цикл
		Если РН.Пометка Тогда
			ТекРегистр=РегистрыНакопления[РН.Регистр];
			ТекРегистр.УстановитьИспользованиеИтогов(Ложь);
			ТекРегистр.УстановитьИспользованиеИтогов(Истина);
			ТекРегистр.ПересчитатьИтоги();
			Если Метаданные.РегистрыНакопления[Рн.Регистр].ВидРегистра=Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				ТекРегистр.УстановитьИспользованиеТекущихИтогов(Ложь);
				ТекРегистр.УстановитьИспользованиеТекущихИтогов(Истина);
				ТекРегистр.ПересчитатьТекущиеИтоги();
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

Функция ДанныеДляСохранения() Экспорт
	Данные=Новый Структура;
	Данные.Вставить("ДатаНачалаНовогоПериода",ДатаНачалаНовогоПериода);
	Данные.Вставить("СУБД",СУБД);
	Данные.Вставить("СмещениеДат",СмещениеДат);
	Данные.Вставить("ИмяБД",ИмяБД);
	Данные.Вставить("РегистрыБухгалтерииСписок",ЗначениеВСтрокуВнутр(РегистрыБухгалтерииСписок.Выгрузить()));
	Данные.Вставить("РегистрыНакопленияОстаткиСписок",ЗначениеВСтрокуВнутр(РегистрыНакопленияОстаткиСписок.Выгрузить()));
	Данные.Вставить("РегистрыНакопленияОборотыСписок",ЗначениеВСтрокуВнутр(РегистрыНакопленияОборотыСписок.Выгрузить()));
	Данные.Вставить("РегистрыСведенийСписок",ЗначениеВСтрокуВнутр(РегистрыСведенийСписок.Выгрузить()));
	Данные.Вставить("ДокументыСписок",ЗначениеВСтрокуВнутр(ДокументыСписок.Выгрузить()));
	Возврат Данные;
КонецФункции         

Процедура ЗагрузитьНастройки( Данные) Экспорт
	ДатаНачалаНовогоПериода =Данные.ДатаНачалаНовогоПериода;
	СУБД=Данные.СУБД;
	СмещениеДат=Данные.СмещениеДат;
	ИмяБД=Данные.ИмяБД;
	РегистрыБухгалтерииСписок.Загрузить(ЗначениеИзСтрокиВнутр(Данные.РегистрыБухгалтерииСписок));
	РегистрыНакопленияОстаткиСписок.Загрузить(ЗначениеИзСтрокиВнутр(Данные.РегистрыНакопленияОстаткиСписок));
	РегистрыНакопленияОборотыСписок.Загрузить(ЗначениеИзСтрокиВнутр(Данные.РегистрыНакопленияОборотыСписок));
	РегистрыСведенийСписок.Загрузить(ЗначениеИзСтрокиВнутр(Данные.РегистрыСведенийСписок));
	ДокументыСписок.Загрузить(ЗначениеИзСтрокиВнутр(Данные.ДокументыСписок));
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция УниверсальныйРегистратор(МетаданныеРегистра)
	ДопустимыеТипы="КорректировкаРегистров КорректировкаЗаписейРегистров Операция ОперацияБух ОперацияМСФО ПереносДанных ";
	ТипыРегистратора=МетаданныеРегистра.СтандартныеРеквизиты.Регистратор.Тип.Типы(); 
	Для каждого ТипРегистратора Из ТипыРегистратора Цикл
		ИмяРегистратора=Метаданные.НайтиПоТипу(ТипРегистратора).Имя;               
		Если Найти(ДопустимыеТипы,ИмяРегистратора) Тогда
			Возврат ИмяРегистратора;
		КонецЕсли;              
	КонецЦикла;                     
	Возврат "";
КонецФункции                       

Функция ВспомогательныйСчет(МДРБ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Хозрасчетный.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Код В(&СписокКодов)
		|	И Хозрасчетный.Наименование ПОДОБНО &ШаблонНаименования
		|
		|УПОРЯДОЧИТЬ ПО
		|	Хозрасчетный.Предопределенный УБЫВ";
	
	СписокКодов=Новый Массив;
	СписокКодов.Добавить("00");
	СписокКодов.Добавить("000");
	Запрос.УстановитьПараметр("СписокКодов", СписокКодов);
	ШаблонНаименования="%вспомогательный%";
	Запрос.УстановитьПараметр("ШаблонНаименования", ШаблонНаименования);
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"ПланСчетов.Хозрасчетный","ПланСчетов."+МДРБ.ПланСчетов.Имя);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ссылка;
	Иначе	
		Возврат ПланыСчетов[МДРБ.ПланСчетов.Имя].ПустаяСсылка();
	КонецЕсли;
КонецФункции

Процедура ТелоЗапросаОсновнаяРНОбороты(ТекстЗапроса,ИмяТаблицы,ИмяРегистра)
	Если СУБД =1 Тогда
		ТекстШаблона="drop table IF EXISTS tmpTable;
		|CREATE TEMP TABLE tmpTable AS SELECT *  -- все поля РН;
		|FROM _InfoRgTable
		|WHERE
		|_Period >= StartDate;
		|
		|truncate table	_InfoRgTable; -- Движения" + ИмяРегистра+"
		|
		|insert into		_InfoRgTable 
		|select * from tmpTable;
		|
		|drop table tmpTable;";
	Иначе
		ТекстШаблона= "
		|SELECT *
		|into ##tmpTable
		|FROM _InfoRgTable
		|WHERE
		|_Period >= @StartDate;
		|
		|truncate table	_InfoRgTable; -- Движения" + ИмяРегистра+"
		|
		|insert into		_InfoRgTable 
		|select * from ##tmpTable;
		|
		|drop table ##tmpTable;";
	КонецЕсли;
	
	ИмяВременнойТаблицы="TMP"+ИмяТаблицы;
	
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"tmpTable",ИмяВременнойТаблицы);
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"_InfoRgTable",ИмяТаблицы);
	
	ТекстЗапроса.ДобавитьСтроку(ТекстШаблона);

КонецПроцедуры // ТекстЗапросаОсновная()

Процедура ДополнитьЗапросРНОбороты(СтрокаРегистра,ТекстЗапроса)
	МассивМД=Новый Массив;
	МДРегистра=Метаданные.РегистрыНакопления[СтрокаРегистра.Регистр];
	МассивМД.Добавить(МДРегистра);
	ТЗСтруктуры=ПолучитьСтруктуруХраненияБазыДанных(МассивМД,истина);
	ОТборСтрок=Новый Структура("Назначение, ИмяТаблицы","Основная, РегистрыНакопления."+МДРегистра.Имя);
	СтрокаОсновная = ТЗСтруктуры.найтиСтроки(Новый Структура("Назначение, ИмяТаблицы","Основная", "РегистрНакопления."+МДРегистра.Имя))[0];
	
	СтрокаИтоги = ТЗСтруктуры.найти("Обороты","Назначение");
	Если СтрокаОсновная <> Неопределено Тогда
		ТелоЗапросаОсновнаяРНОбороты(ТекстЗапроса,СтрокаОсновная.ИмяТаблицыХранения,МДРегистра.Имя);
		Если СтрокаИтоги <> неопределено  Тогда
			ТелоЗапросаПолнаяОчисткаТаблицы(ТекстЗапроса,СтрокаИтоги.ИмяТаблицыХранения,МДРегистра.Имя);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура ТелоЗапросаОчисткаТЧДокумента(ТекстЗапроса,ТаблицаДокумента,ТаблицаТЧ,Комментарий)
	ПолеСсылки=СтрЗаменить(ТаблицаДокумента,"X1","");
	Если СУБД =1 Тогда
		ТекстШаблона="
		|-- _Комментарий
		|drop table IF EXISTS TMP_VT;
		|CREATE TEMP TABLE TMP_VT AS SELECT  
		|_ТаблицаТЧ.*
		|FROM _ТаблицаДокумента
		|JOIN _ТаблицаТЧ ON _ТаблицаДокумента._IDRRef = _ТаблицаТЧ._ПолеСсылки_IDRRef    
		|WHERE _ТаблицаДокумента._Date_Time >= StartDate;
		|
		|TRUNCATE table _ТаблицаТЧ;  
		|
		|insert into _ТаблицаТЧ 
		|select * from TMP_VT;
		|drop table IF EXISTS TMP_VT;";
	Иначе
		ТекстШаблона= "
		|-- _Комментарий
		|if object_id('tempdb..##TMP_VT') is not null
		|drop table #TMP_VT
		|SELECT 
		|_ТаблицаТЧ.*
		|into #TMP_VT
		|FROM _ТаблицаДокумента
		|JOIN _ТаблицаТЧ ON _ТаблицаДокумента._IDRRef = _ТаблицаТЧ._ПолеСсылки_IDRRef    
		|WHERE _ТаблицаДокумента._Date_Time >= @StartDate;
		|
		|TRUNCATE table _ТаблицаТЧ;  
		|
		|insert into _ТаблицаТЧ 
		|select * from #TMP_VT;
		|
		|drop table #TMP_VT;";
	КонецЕсли;
	
	
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"_ТаблицаТЧ",ТаблицаТЧ);
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"_ТаблицаДокумента",ТаблицаДокумента);
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"_ПолеСсылки",ПолеСсылки);
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"_Комментарий",Комментарий);
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"#TMP_VT","#TMP_VT_"+ТаблицаТЧ);
	
	ТекстЗапроса.ДобавитьСтроку(ТекстШаблона);

КонецПроцедуры // ТекстЗапросаОсновная()

Функция ЕстьСтрокиВТЧ(ИмяТЧ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТЧДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	ИмяТаблицы КАК ТЧДокумента
		|ГДЕ
		|	ТЧДокумента.Ссылка.Дата < &ДатаСвертки";
	
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"ИмяТаблицы",ИмяТЧ);
	Запрос.УстановитьПараметр("ДатаСвертки", ДатаНачалаНовогоПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции


Процедура ДополнитьЗапросТЧДокумента(СтрокаДокумента,ТекстЗапроса)
	МассивМД=Новый Массив;
	МДРегистра=Метаданные.Документы[СтрокаДокумента.Документ];
	МассивМД.Добавить(МДРегистра);
	ТЗСтруктуры=ПолучитьСтруктуруХраненияБазыДанных(МассивМД,истина);
	СтрокаОсновная = ТЗСтруктуры.найти("Основная","Назначение");
	СтрокаИзменения = ТЗСтруктуры.найти("РегистрацияИзменений","Назначение");
	ТабличныеЧасти=ТЗСтруктуры.НайтиСтроки(Новый структура("Назначение","ТабличнаяЧасть"));
	Если СтрокаИзменения <> Неопределено Тогда
		ТелоЗапросаПолнаяОчисткаТаблицы(ТекстЗапроса,СтрокаИзменения.ИмяТаблицыХранения,СтрокаИзменения.ИмяТаблицы);
	КонецЕсли;
	Для каждого СтрокаТЧ Из ТабличныеЧасти Цикл
		//Если ЕстьСтрокиВТЧ(СтрокаТЧ.ИмяТаблицы) Тогда
			ТелоЗапросаОчисткаТЧДокумента(ТекстЗапроса,СтрокаОсновная.ИмяТаблицыХранения,СтрокаТЧ.ИмяТаблицыХранения,СтрокаТЧ.ИмяТаблицы);
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//====================================================================================================================== 
 // Добавляет к тексту запроса стартовую часть
 // Параметры - ТекстЗапроса, текст
 Процедура НачалоЗапросаSQL(ТекстЗапроса)     
	 датаДляЗапроса=Формат(ДобавитьМесяц(ДатаНачалаНовогоПериода,12*СмещениеДат),"ДФ='yyyy-MM-dd HH:mm:ss'");
	 Если СУБД = 1 Тогда
		 ТекстШапки="DO $$
		 |DECLARE StartDate date;
		 |BEGIN
		 |	StartDate := '"+датаДляЗапроса+"';";
	 Иначе	 
		 ТекстШапки="Use ["+ИмяБД+"]
		 |Go
		 |Declare @StartDate date = '"+датаДляЗапроса+"';";
	КонецЕсли; 
	 ТекстЗапроса.ДобавитьСтроку(ТекстШапки);	
КонецПроцедуры
 //====================================================================================================================== 
 // Добавляет к тексту запроса финальную часть
 // Параметры - ТекстЗапроса, текст
 Процедура КонецЗапросаSQL(ТекстЗапроса)
	 Если СУБД=1 Тогда
		ТекстПодвала="END $$;";
	 Иначе
		ТекстПодвала="Go";
	 КонецЕсли;
	ТекстЗапроса.ДобавитьСтроку(ТекстПодвала);	
КонецПроцедуры

//====================================================================================================================== 
//  Помещает во временную таблицу  остатки по регистру Бухгалтерии
//  Параметры
// 		Регистр - Структура : 
// 		               Регистр - объект метаданных регистра бухгалтерии
// 	                   КоррСчет - ПланСчетовСсылка,  вспомогательный балансовый счет  без аналитики
// 		МВТ - менеджер временных таблиц
Процедура ИнициализироватьЗапросПоРБ(ОписаниеРегистра,МВТ)
	МДРегистра=Метаданные.РегистрыБухгалтерии[ОписаниеРегистра.Регистр];
	ИДРегистра=МДРегистра.Имя;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МВТ;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаНовогоПериода);
	//Это текст для стандартного РБ из типовых, с коррекцией мусора в аналитике
	//Запрос.Текст= 
	//	"ВЫБРАТЬ
	//	|	ХозрасчетныйОстатки.Организация,
	//	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОстатки.СуммаОстатокКт) КАК Сумма,
	//	|	ХозрасчетныйОстатки.Счет КАК СчетДт,
	//	|	ХозрасчетныйОстатки.Субконто1 КАК СубконтоДт1,
	//	|	ХозрасчетныйОстатки.Субконто2 КАК СубконтоДт2,
	//	|	ХозрасчетныйОстатки.Субконто3 КАК СубконтоДт3,
	//	|	ВЫБОР
	//	|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
	//	|			ТОГДА ХозрасчетныйОстатки.Валюта
	//	|		ИНАЧЕ NULL
	//	|	КОНЕЦ КАК ВалютаДт,
	//	|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт - ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт) КАК ВалютнаяСуммаДт,
	//	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт - ХозрасчетныйОстатки.КоличествоОстатокКт) КАК КоличествоДт,
	//	|	ВЫБОР
	//	|		КОГДА ХозрасчетныйОстатки.Счет.Забалансовый
	//	|			ТОГДА НЕОПРЕДЕЛЕНО
	//	|		ИНАЧЕ &КоррСчет
	//	|	КОНЕЦ КАК СчетКт,
	//	|	NULL КАК СубконтоКт1,
	//	|	NULL КАК СубконтоКт2,
	//	|	NULL КАК СубконтоКт3,
	//	|	NULL КАК ВалютаКт,
	//	|	NULL КАК ВалютнаяСуммаКт,
	//	|	NULL КАК КоличествоКт
	//	|ПОМЕСТИТЬ вт_ТаблицаПроводок
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаНачала, , , ) КАК ХозрасчетныйОстатки
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ХозрасчетныйОстатки.Счет,
	//	|	ХозрасчетныйОстатки.Субконто1,
	//	|	ХозрасчетныйОстатки.Субконто2,
	//	|	ХозрасчетныйОстатки.Субконто3,
	//	|	ХозрасчетныйОстатки.Организация,
	//	|	ВЫБОР
	//	|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
	//	|			ТОГДА ХозрасчетныйОстатки.Валюта
	//	|		ИНАЧЕ NULL
	//	|	КОНЕЦ,
	//	|	ВЫБОР
	//	|		КОГДА ХозрасчетныйОстатки.Счет.Забалансовый
	//	|			ТОГДА НЕОПРЕДЕЛЕНО
	//	|		ИНАЧЕ &КоррСчет
	//	|	КОНЕЦ
	//	|
	//	|ИМЕЮЩИЕ
	//	|	(СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) - СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) <> 0
	//	|		ИЛИ СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт) - СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт) <> 0
	//	|		ИЛИ СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) - СУММА(ХозрасчетныйОстатки.КоличествоОстатокКт) <> 0)";
	
	
	Запрос.Текст= 
		"ВЫБРАТЬ *
		|ПОМЕСТИТЬ вт_ТаблицаПроводок
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаНачала, , , ) КАК ХозрасчетныйОстатки";
	
	
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"РегистрБухгалтерии.Хозрасчетный","РегистрБухгалтерии."+ИДРегистра);
	Запрос.Выполнить();
КонецПроцедуры

//====================================================================================================================== 
// Запрос с иерархией по организации и счету
// Параметры - МВТ, Менеджер временных таблиц
// Возвращает ЗапросОбъект
Функция ЗапросДляОбходаРБ(МВТ)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МВТ;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаНовогоПериода);
	Запрос.Текст= 
	"ВЫБРАТЬ
		|	вт_ТаблицаПроводок.Организация КАК Организация,
		|	вт_ТаблицаПроводок.Счет КАК Счет
		|ИЗ
		|	вт_ТаблицаПроводок КАК вт_ТаблицаПроводок
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ТаблицаПроводок.Организация,
		|	вт_ТаблицаПроводок.Счет
		|ИТОГИ ПО
		|	Организация,
		|	Счет";
	Возврат Запрос;
КонецФункции

//====================================================================================================================== 
// выбирает из временной таблицы остатки по счету и организации
// Параметры МДРегистра - ОбъектМетаданных регистра бухгалтерии 
//                   СчетУчета - ПланСчетовСсылка
//                   Организация  - СправочникСсылка Организации
//                   МВТ - менеджер временных таблиц
// Возвращает таблицу значений для загрузки в набор записей
Функция ОстаткиРБПоСчету(ОписаниеРегистра,СчетУчета,Организация,МВТ)
	//todo вынести запрос на форму, может в скд?
	МДРегистра=Метаданные.РегистрыБухгалтерии[ОписаниеРегистра.Регистр];
	ИДРегистра=МДРегистра.Имя;
	Измерения=МДРегистра.Измерения; 
	Ресурсы=МДРегистра.Ресурсы;
	МаксКоличествоСубконтоСчета=СчетУчета.Метаданные().МаксКоличествоСубконто;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МВТ;     
	ТекстЗапроса= 
		"ВЫБРАТЬ
		|	вт_ТаблицаПроводок.Счет КАК Счет,
		|	&ДатаНачала КАК Период,
		|	ИСТИНА КАК Активность,
		|	""Свертка остатков"" КАК Содержание,
		|	вт_ТаблицаПроводок.Счет КАК СчетДт,
		|	ВЫБОР
		|		КОГДА вт_ТаблицаПроводок.Счет.Забалансовый
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ &КоррСчет
		|	КОНЕЦ КАК СчетКт,
		|	Неопределено КАК Регистратор,
		|	";
	    Для каждого Измерение Из Измерения  Цикл
			ИзмерениеИмя=Измерение.Имя;
			ПризнакУчета=Измерение.ПризнакУчета;
			Если ПризнакУчета =Неопределено Тогда
				ТекстЗапросаИзмерение="
				|	вт_ТаблицаПроводок."+ИзмерениеИмя+" КАК "+ИзмерениеИмя+?(Измерение.Балансовый,"","Дт")+",";
			Иначе   
				ПризнакИмя=ПризнакУчета.Имя;
				ТекстЗапросаИзмерение="
				|	ВЫБОР
				|		КОГДА вт_ТаблицаПроводок.Счет."+ПризнакИмя+"
				|			ТОГДА вт_ТаблицаПроводок."+ИзмерениеИмя+"
				|		ИНАЧЕ NULL
				|	КОНЕЦ КАК "+ИзмерениеИмя+?(Измерение.Балансовый,"","Дт")+",";
				Если Не Измерение.Балансовый Тогда
				ТекстЗапросаИзмерение=ТекстЗапросаИзмерение+"
				|	NULL КАК "+ИзмерениеИмя+"Кт,";
				КонецЕсли;
			КонецЕсли;
			ТекстЗапроса=ТекстЗапроса+ТекстЗапросаИзмерение;
		КонецЦикла;
		
		Для каждого Ресурс Из Ресурсы  Цикл 
			РесурсИмя=Ресурс.Имя;
			Если Ресурс.Балансовый Тогда
				ТекстЗапросаРесурс="
				|вт_ТаблицаПроводок."+РесурсИмя+"ОстатокДт - "+ РесурсИмя+"ОстатокКт КАК "+РесурсИмя+",";
			Иначе
				ТекстЗапросаРесурс="
				|вт_ТаблицаПроводок."+РесурсИмя+"ОстатокДт - "+ РесурсИмя+"ОстатокКт КАК "+РесурсИмя+"Дт,";
			КонецЕсли;
			ТекстЗапроса=ТекстЗапроса+ТекстЗапросаРесурс;
		КонецЦикла;       
		Для й=1 По МаксКоличествоСубконтоСчета Цикл
			ТекстЗапросаСубконто=?(й=1,"",",")+"         
		|	вт_ТаблицаПроводок.Субконто1 КАК СубконтоДт1,
		|	ЕСТЬNULL(ВидыСубконтоДт1.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт1";
			ТекстЗапросаСубконто=СтрЗаменить(ТекстЗапросаСубконто,"Субконто1","Субконто"+й);
			ТекстЗапросаСубконто=СтрЗаменить(ТекстЗапросаСубконто,"СубконтоДт1","СубконтоДт"+й);
			ТекстЗапроса=ТекстЗапроса+ТекстЗапросаСубконто;
		КонецЦикла;  
		ТекстЗапроса=ТекстЗапроса+"
		|ИЗ
		|	вт_ТаблицаПроводок КАК вт_ТаблицаПроводок";

		Для й=1 По МаксКоличествоСубконтоСчета Цикл
			ТекстЗапросаСубконто="         
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоДт1
		|		ПО вт_ТаблицаПроводок.Счет = ВидыСубконтоДт1.Ссылка
		|			И (ВидыСубконтоДт1.НомерСтроки = &НомерСубконто)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоКт1
		|		ПО &КоррСчет = ВидыСубконтоКт1.Ссылка
		|			И (ВидыСубконтоКт1.НомерСтроки = &НомерСубконто)";
			ТекстЗапросаСубконто=СтрЗаменить(ТекстЗапросаСубконто,"Дт1","Дт"+й);
			ТекстЗапросаСубконто=СтрЗаменить(ТекстЗапросаСубконто,"Кт1","Кт"+й);   
			ТекстЗапросаСубконто=СтрЗаменить(ТекстЗапросаСубконто,"&НомерСубконто",""+й);   
			ТекстЗапроса=ТекстЗапроса+ТекстЗапросаСубконто;
		КонецЦикла;  
		
		ТекстЗапроса=ТекстЗАпроса+"
		|ГДЕ
		|	вт_ТаблицаПроводок.Счет = &СчетУчета
		|	И вт_ТаблицаПроводок.Организация = &Организация";

		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"ПланСчетов.Хозрасчетный","ПланСчетов."+МДРегистра.ПланСчетов.Имя);
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"ВидыСубконтоХозрасчетные",МДРегистра.ПланСчетов.ВидыСубконто.Имя);
		Запрос.Текст=ТекстЗапроса;
		Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
		Запрос.УстановитьПараметр("КоррСчет",ОписаниеРегистра.КоррСчет);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаНовогоПериода);
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаНовогоПериода);
		Рез=Запрос.Выполнить().Выгрузить();
		Возврат Рез;
	//Запрос.Текст= 
	//	"ВЫБРАТЬ
	//	|	вт_ТаблицаПроводок.Организация КАК Организация,
	//	|	вт_ТаблицаПроводок.СчетДт КАК Счет,
	//	|	&ДатаНачала КАК Период,
	//	|	ЛОЖЬ КАК Ативность,
	//	|	""Свертка остатков"" КАК Содержание,
	//	|	СУММА(вт_ТаблицаПроводок.Сумма) КАК Сумма,
	//	|	вт_ТаблицаПроводок.СчетДт КАК СчетДт,
	//	|	вт_ТаблицаПроводок.СчетКт КАК СчетКт,
	//	|	СУММА(вт_ТаблицаПроводок.КоличествоДт) КАК КоличествоДт,
	//	|	СУММА(вт_ТаблицаПроводок.КоличествоКт) КАК КоличествоКт,
	//	|	вт_ТаблицаПроводок.ВалютаДт КАК ВалютаДт,
	//	|	СУММА(вт_ТаблицаПроводок.ВалютнаяСуммаДт) КАК ВалютнаяСуммаДт,
	//	|	вт_ТаблицаПроводок.ВалютаКт КАК ВалютаКт,
	//	|	СУММА(вт_ТаблицаПроводок.ВалютнаяСуммаКт) КАК ВалютнаяСуммаКт,
	//	|	вт_ТаблицаПроводок.СубконтоДт1 КАК СубконтоДт1,
	//	|	ЕСТЬNULL(ВидыСубконтоДт1.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт1,
	//	|	вт_ТаблицаПроводок.СубконтоДт2 КАК СубконтоДт2,
	//	|	ЕСТЬNULL(ВидыСубконтоДт2.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт2,
	//	|	вт_ТаблицаПроводок.СубконтоДт3 КАК СубконтоДт3,
	//	|	ЕСТЬNULL(ВидыСубконтоДт3.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт3,
	//	|	вт_ТаблицаПроводок.СубконтоКт1 КАК СубконтоКт1,
	//	|	ЕСТЬNULL(ВидыСубконтоКт1.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт1,
	//	|	вт_ТаблицаПроводок.СубконтоКт2 КАК СубконтоКт2,
	//	|	ЕСТЬNULL(ВидыСубконтоКт2.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт2,
	//	|	вт_ТаблицаПроводок.СубконтоКт3 КАК СубконтоКт3,
	//	|	ЕСТЬNULL(ВидыСубконтоКт3.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт3
	//	|ИЗ
	//	|	вт_ТаблицаПроводок КАК вт_ТаблицаПроводок
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоДт1
	//	|		ПО вт_ТаблицаПроводок.СчетДт = ВидыСубконтоДт1.Ссылка
	//	|			И (ВидыСубконтоДт1.НомерСтроки = 1)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоДт2
	//	|		ПО вт_ТаблицаПроводок.СчетДт = ВидыСубконтоДт2.Ссылка
	//	|			И (ВидыСубконтоДт2.НомерСтроки = 2)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоДт3
	//	|		ПО вт_ТаблицаПроводок.СчетДт = ВидыСубконтоДт3.Ссылка
	//	|			И (ВидыСубконтоДт3.НомерСтроки = 3)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоКт1
	//	|		ПО вт_ТаблицаПроводок.СчетКт = ВидыСубконтоКт1.Ссылка
	//	|			И (ВидыСубконтоКт1.НомерСтроки = 1)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоКт2
	//	|		ПО вт_ТаблицаПроводок.СчетКт = ВидыСубконтоКт2.Ссылка
	//	|			И (ВидыСубконтоКт2.НомерСтроки = 2)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоКт3
	//	|		ПО вт_ТаблицаПроводок.СчетКт = ВидыСубконтоКт3.Ссылка
	//	|			И (ВидыСубконтоКт3.НомерСтроки = 3)
	//	|ГДЕ
	//	|	вт_ТаблицаПроводок.СчетДт = &СчетУчета
	//	|	И вт_ТаблицаПроводок.Организация = &Организация
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	вт_ТаблицаПроводок.Организация,
	//	|	вт_ТаблицаПроводок.СчетДт,
	//	|	вт_ТаблицаПроводок.ВалютаДт,
	//	|	вт_ТаблицаПроводок.СчетКт,
	//	|	вт_ТаблицаПроводок.ВалютаКт,
	//	|	вт_ТаблицаПроводок.СубконтоДт1,
	//	|	ЕСТЬNULL(ВидыСубконтоДт1.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)),
	//	|	вт_ТаблицаПроводок.СубконтоДт2,
	//	|	ЕСТЬNULL(ВидыСубконтоДт2.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)),
	//	|	вт_ТаблицаПроводок.СубконтоДт3,
	//	|	ЕСТЬNULL(ВидыСубконтоДт3.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)),
	//	|	вт_ТаблицаПроводок.СубконтоКт1,
	//	|	ЕСТЬNULL(ВидыСубконтоКт1.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)),
	//	|	вт_ТаблицаПроводок.СубконтоКт2,
	//	|	ЕСТЬNULL(ВидыСубконтоКт2.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)),
	//	|	вт_ТаблицаПроводок.СубконтоКт3,
	//	|	ЕСТЬNULL(ВидыСубконтоКт3.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)),
	//	|	вт_ТаблицаПроводок.СчетДт
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	СубконтоДт1,
	//	|	СубконтоДт2,
	//	|	СубконтоДт3,
	//	|	СубконтоКт1,
	//	|	СубконтоКт2,
	//	|	СубконтоКт3";
	
КонецФункции // ТексЗАпросаОстатковРБ()
//====================================================================================================================== 
// Дополняет текст запроса запросом, который очищает движения < даты переноса остатков, очищает таблицы итогов Регистра бухгалтерии
// Параметры 
//                 МДРегистра - Метаданные
//                 ТекстЗапроса -ТекстовыйДокумент
Процедура СтркутураХраненияРБ(МДРегистра,ТекстЗапроса)
	МассивМД=Новый Массив;
	МассивМД.Добавить(МДРегистра);
	ТЗСтруктуры=ПолучитьСтруктуруХраненияБазыДанных(МассивМД,истина);
    СтрокаОсновная = ТЗСтруктуры.найти("Основная","Назначение");
	ТелоЗапросаОчисткаСПереносом(ТекстЗапроса,СтрокаОсновная.ИмяТаблицыХранения,МДРегистра.Имя+" Основная");
    СтрокаСубконто = ТЗСтруктуры.найти("ЗначенияСубконто","Назначение");
	ТелоЗапросаОчисткаСПереносом(ТекстЗапроса,СтрокаСубконто.ИмяТаблицыХранения,МДРегистра.Имя+" ЗначенияСубконто");
	
	СтрокаИтоги = ТЗСтруктуры.найти("ИтогиМеждуСчетами","Назначение");
	ТелоЗапросаПолнаяОчисткаТаблицы(ТекстЗапроса,СтрокаИтоги.ИмяТаблицыХранения,МДРегистра.Имя+" ИтогиМеждуСчетами");
	
	СтрокаИтоги = ТЗСтруктуры.найти("ИтогиПоСчетам","Назначение");
	ТелоЗапросаПолнаяОчисткаТаблицы(ТекстЗапроса,СтрокаИтоги.ИмяТаблицыХранения,МДРегистра.Имя+" ИтогиПоСчетам");
	КоличествоСубконто=МДРегистра.ПланСчетов.МаксКоличествоСубконто;
	Для й=1 По КоличествоСубконто Цикл
		СтрокаИтоги = ТЗСтруктуры.найти("ИтогиПоСчетамССубконто"+й,"Назначение");
		ТелоЗапросаПолнаяОчисткаТаблицы(ТекстЗапроса,СтрокаИтоги.ИмяТаблицыХранения,МДРегистра.Имя+ " ИтогиПоСчетамССубконто"+й);
	КонецЦикла; 
КонецПроцедуры

//====================================================================================================================== 
// Дополняет  текст запроса запросом, который через временную таблицу переносит только нужные записи в очищенную исхожную таблицу
// параметры  ТекстЗапроса - тектовый документ
//                    ИмяТаблицы - строка
//                    ИмяРегистра - строка
Процедура ТелоЗапросаОчисткаСПереносом(ТекстЗапроса,ИмяТаблицы,ИмяРегистра)
	Если СУБД=1 Тогда
		ТекстШаблона="drop table IF EXISTS TMP_InfoRgTable;
		|CREATE TEMP TABLE tmpTable AS 
		|SELECT *
		|FROM _RgTable
		|WHERE
		|_Period >= StartDate;
		|
		|truncate table _RgTable; 
		|
		|insert into _RgTable 
		|select * from tmpTable;
		|
		|drop table tmpTable;";
	Иначе     
		ТекстШаблона= "
		|-- " + ИмяРегистра+"
		|SELECT *
		|into ##tmpTable
		|FROM _RgTable
		|WHERE
		|_Period >= @StartDate;
		|
		|truncate table _RgTable; 
		|
		|insert into _RgTable 
		|select * from ##tmpTable;
		|
		|drop table ##tmpTable;";
	КонецЕсли;
	
	ИмяВременнойТаблицы="TMP_"+ИмяТаблицы;
	
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"tmpTable",ИмяВременнойТаблицы);
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"_RgTable",ИмяТаблицы);
	
	ТекстЗапроса.ДобавитьСтроку(ТекстШаблона);

КонецПроцедуры // ТекстЗапросаОсновная()

//====================================================================================================================== 
// Дополняет  текст запроса запросом для очистки итогов Регистра бухгалтерии
// параметры  ТекстЗапроса - тектовый документ
//                    ИмяТаблицы - строка
//                    ИмяРегистра - строка
Процедура ТелоЗапросаПолнаяОчисткаТаблицы(ТекстЗапроса,ИмяТаблицы,Комментарий)
	ТекстШаблона= "truncate table _Table; -- _Комментарий";
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"_Table",ИмяТаблицы);
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"_Комментарий",Комментарий);
	ТекстЗАпроса.ДобавитьСтроку(ТекстШаблона);
КонецПроцедуры// ТекстЗапросаИтоги

Процедура СтруктураХраненияРНОстатки(МДРегистра,ТекстЗапроса)
	МассивМД=Новый Массив;
	МассивМД.Добавить(МДРегистра);
	ТЗСтруктуры=ПолучитьСтруктуруХраненияБазыДанных(МассивМД,истина);
    СтрокаОсновная = ТЗСтруктуры.найти("Основная","Назначение");
    СтрокаИтоги = ТЗСтруктуры.найти("Итоги","Назначение");
	Если СтрокаОсновная <> Неопределено Тогда
		ТелоЗапросаОсновнаяРН(ТекстЗапроса,СтрокаОсновная.ИмяТаблицыХранения,МДРегистра.Имя);
		Если СтрокаИтоги <> неопределено  Тогда
			ТелоЗапросаИтогиРН(ТекстЗапроса,СтрокаИтоги.ИмяТаблицыХранения,МДРегистра.Имя);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура ТелоЗапросаОсновнаяРН(ТекстЗапроса,ИмяТаблицы,ИмяРегистра)
	Если СУБД=1 Тогда
		
		ТекстШаблона="drop table IF EXISTS tmpTable;
		|CREATE TEMP TABLE tmpTable AS SELECT *  -- все поля РС;
		|FROM _InfoRgTable
		|WHERE
		|_Period >= StartDate;
		|
		|truncate table _InfoRgTable; -- Движения" + ИмяРегистра+"
		|
		|insert into _InfoRgTable 
		|select * from tmpTable;
		|
		|drop table tmpTable;";
	Иначе
		ТекстШаблона= "
		|SELECT *
		|into ##tmpTable
		|FROM _InfoRgTable
		|WHERE
		|_Period >= @StartDate;
		|
		|truncate table _InfoRgTable; -- Движения" + ИмяРегистра+"
		|
		|insert into _InfoRgTable 
		|select * from ##tmpTable;
		|
		|drop table ##tmpTable;";
	КонецЕсли;
	
	ИмяВременнойТаблицы="TMP"+ИмяТаблицы;
	
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"tmpTable",ИмяВременнойТаблицы);
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"_InfoRgTable",ИмяТаблицы);
	
	ТекстЗапроса.ДобавитьСтроку(ТекстШаблона);

КонецПроцедуры // ТекстЗапросаОсновная()

Процедура ТелоЗапросаИтогиРН(ТекстЗапроса,ИмяТаблицы,ИмяРегистра)
	ТекстШаблона= "truncate table _InfoRgTable; -- Итоги" + ИмяРегистра+"";
	ТекстШаблона=СтрЗаменить(ТекстШаблона,"_InfoRgTable",ИмяТаблицы);
	ТекстЗАпроса.ДобавитьСтроку(ТекстШаблона);
КонецПроцедуры// ТекстЗапросаИтоги

Функция ШаблонЗапросаДЛяНезависимогоРС(ТаблицаРС,ТаблицаПолей)
	Если СУБД=1 Тогда
		ТекстЗапроса="drop table IF EXISTS TMP_InfoRgTable;
		|CREATE TEMP TABLE TMP_InfoRgTable AS SELECT  -- все поля РС;";
		ШаблонСтроки="V8TblAli1_Q_000_T_001.%_ИмяПоля,";

		Для каждого Поле Из ТаблицаПолей Цикл
			ТекстЗапроса=ТекстЗапроса+"
			|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
		КонецЦикла;                               
		ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
		ТекстЗапроса=ТекстЗапроса+"
		|FROM
		|(
		|SELECT												-- все поля РС";
		
		ШаблонСтроки="_InfoRgTable_IR2.%_ИмяПоля AS %_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			ТекстЗапроса=ТекстЗапроса+"
			|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
		КонецЦикла; 
		ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);//лишняя запятая в конце
		ТекстЗапроса=ТекстЗапроса+"
		|FROM
		|(
		|SELECT                                                                 -- только измерения";
		
		ШаблонСтроки="_InfoRgTable.%_ИмяПоля AS %_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса=ТекстЗапроса+"
		|MAX(_InfoRgTable._Period) AS _MAXPERIOD -- Максимум по периоду
		|FROM
		|_InfoRgTable 
		|WHERE
		|_InfoRgTable._Period <= StartDate -- отбор до даты
		|GROUP BY";
		
		ШаблонСтроки="_InfoRgTable.%_ИмяПоля,";  
		КоличествоПолей=0;
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И  Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
				КоличествоПолей=КоличествоПолей+1;
			КонецЕсли; 
		КонецЦикла;                                   
		Если КоличествоПолей > 0 Тогда
			ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);//лишняя запятая в конце
		Иначе
			ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-8);//лишняя группировка
		КонецЕсли;
		ТекстЗапроса=ТекстЗапроса+"
		|) V8TblAli1_IR1 -- таблица с максимальными периодами
		|INNER JOIN _InfoRgTable _InfoRgTable_IR2  -- Соединяем (внутр) опять с РС 
		|ON";
		
		ШаблонСтроки="V8TblAli1_IR1.%_ИмяПоля = _InfoRgTable_IR2.%_ИмяПоля AND";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И  Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса=ТекстЗапроса+"
		|V8TblAli1_IR1._MAXPERIOD = _InfoRgTable_IR2._Period -- ПЕРИОД
		|) V8TblAli1_Q_000_T_001 -- срез последних
		|UNION ALL
		|SELECT * FROM _InfoRgTable WHERE _InfoRgTable._Period > StartDate; -- записи остаются как есть
		|
		|truncate table _InfoRgTable; -- полная очистка регистра 
		|
		|insert into _InfoRgTable 
		|select * from TMP_InfoRgTable;";
	Иначе
		ТекстЗапроса="drop table IF EXISTS ##TMP_InfoRgTable;
		|SELECT  -- все поля РС;";
		ШаблонСтроки="#V8TblAli1_Q_000_T_001.%_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			ТекстЗапроса=ТекстЗапроса+"
			|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
		КонецЦикла; 
		ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
		ТекстЗапроса=ТекстЗапроса+"
		|INTO ##TMP_InfoRgTable
		|FROM
		|(
		|SELECT												-- все поля РС";
		
		ШаблонСтроки="_InfoRgTable_IR2.%_ИмяПоля AS %_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			ТекстЗапроса=ТекстЗапроса+"
			|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
		КонецЦикла; 
		ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);//лишняя запятая в конце
		ТекстЗапроса=ТекстЗапроса+"
		|FROM
		|(
		|SELECT                                                                 -- только измерения";
		
		ШаблонСтроки="_InfoRgTable.%_ИмяПоля AS %_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса=ТекстЗапроса+"
		|MAX(_InfoRgTable._Period) AS _MAXPERIOD -- Максимум по периоду
		|FROM
		|_InfoRgTable WITH(NOLOCK)
		|WHERE
		|_InfoRgTable._Period <= @StartDate -- отбор до даты
		|GROUP BY";
		
		ШаблонСтроки="_InfoRgTable.%_ИмяПоля,";
		КоличествоПолей=0;
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И  Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
				КоличествоПолей=КоличествоПолей+1;
			КонецЕсли; 
		КонецЦикла; 
		Если КоличествоПолей > 0 Тогда
			ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);//лишняя запятая в конце
		Иначе
			ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-8);//лишняя группировка
		КонецЕсли;
		
		ТекстЗапроса=ТекстЗапроса+"
		|) #V8TblAli1_IR1 -- таблица с максимальными периодами
		|INNER JOIN _InfoRgTable _InfoRgTable_IR2 WITH(NOLOCK) -- Соединяем (внутр) опять с РС 
		|ON";
		
		ШаблонСтроки="#V8TblAli1_IR1.%_ИмяПоля = _InfoRgTable_IR2.%_ИмяПоля AND";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И  Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса=ТекстЗапроса+"
		|#V8TblAli1_IR1._MAXPERIOD = _InfoRgTable_IR2._Period -- ПЕРИОД
		|) #V8TblAli1_Q_000_T_001 -- срез последних
		|UNION ALL
		|SELECT * FROM _InfoRgTable WHERE _InfoRgTable._Period > @StartDate; -- записи остаются как есть
		|
		|truncate table _InfoRgTable; -- полная очистка регистра 
		|
		|insert into _InfoRgTable 
		|select * from ##TMP_InfoRgTable;";
	КонецЕсли; 
	
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"_InfoRgTable",ТаблицаРС);
	Возврат ТекстЗапроса;
КонецФункции

Функция ШаблонЗапросаДЛяРССРегистратором(ТаблицаРС,ТаблицаПолей)
	Если ТаблицаПолей.Найти("_RecorderTRef","ИмяПоляХранения") <> Неопределено Тогда
		СоставнойРегистратор=Истина;
	Иначе
		СоставнойРегистратор=Ложь;
	КонецЕсли;
	Если СУБД=1 Тогда    
		
		ТекстЗапроса="drop table IF EXISTS TMP_InfoRgTable;
		|CREATE TEMP TABLE TMP_InfoRgTable AS SELECT  -- все поля РС;";
		
		//V8TblAli1_Q_000_T_001._Period AS f_1,
		ШаблонСтроки="V8TblAli1_Q_000_T_001.%_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			ТекстЗапроса=ТекстЗапроса+"
			|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
		КонецЦикла; 
		ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
		ТекстЗапроса=ТекстЗапроса+"
		|FROM
		|(
		|SELECT												-- все поля РС";
		
		//_InfoRgTable_IR12._Fld20750 AS _Fld20750,
		ШаблонСтроки="_InfoRgTable_IR12.%_ИмяПоля AS %_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			ТекстЗапроса=ТекстЗапроса+"
			|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
		КонецЦикла; 
		ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
		ТекстЗапроса=ТекстЗапроса+"
		|FROM (
		|SELECT -- Измерения";
		
		//V8TblAli1_IR1._Fld20742RRef AS _Fld20742RRef,,
		ШаблонСтроки="V8TblAli1_IR1.%_ИмяПоля AS %_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла;                                    
		
		
		Если СоставнойРегистратор Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|V8TblAli1_IR1._MAXPERIOD AS _MAXPERIOD,
			|SUBSTR(MAX(_InfoRgTable_IR2._RecorderTRef ||  _InfoRgTable_IR2._RecorderRRef), 1, 4) AS _MAXRECORDERTRef,
			|SUBSTR(MAX(_InfoRgTable_IR2._RecorderTRef ||  _InfoRgTable_IR2._RecorderRRef), 5, 16) AS _MAXRECORDERRRef
			|FROM (
			|SELECT";
		Иначе
			ТекстЗапроса=ТекстЗапроса+"
			|V8TblAli1_IR1._MAXPERIOD AS _MAXPERIOD,
			|MAX(_InfoRgTable_IR2._RecorderRRef) AS _MAXRECORDERRRef
			|FROM (
			|SELECT";
		КонецЕсли;
		
		
		//_InfoRgTable._Fld20742RRef AS _Fld20742RRef,
		ШаблонСтроки="_InfoRgTable.%_ИмяПоля AS %_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса=ТекстЗапроса+"
		|MAX(_InfoRgTable._Period) AS _MAXPERIOD
		|FROM
		|_InfoRgTable 
		|WHERE
		|_InfoRgTable._Period <=  StartDate AND _InfoRgTable._Active = TRUE
		|GROUP BY";
		
		//_InfoRgTable._Fld20742RRef,
		ШаблонСтроки="_InfoRgTable.%_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
		
		ТекстЗапроса=ТекстЗапроса+"
		|) V8TblAli1_IR1
		|INNER JOIN _InfoRgTable _InfoRgTable_IR2 
		|ON";
		
		//V8TblAli1_IR1._Fld20747RRef = _InfoRgTable_IR2._Fld20747RRef AND 
		ШаблонСтроки="V8TblAli1_IR1.%_ИмяПоля = _InfoRgTable_IR2.%_ИмяПоля AND";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		
		ТекстЗапроса=ТекстЗапроса+" 
		|V8TblAli1_IR1._MAXPERIOD = _InfoRgTable_IR2._Period
		|WHERE
		|_InfoRgTable_IR2._Active = TRUE
		|GROUP BY";
		
		//V8TblAli1_IR1._Fld20742RRef,
		ШаблонСтроки="V8TblAli1_IR1.%_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса=ТекстЗапроса+" 
		|V8TblAli1_IR1._MAXPERIOD
		|) V8TblAli1_IR11
		|INNER JOIN _InfoRgTable _InfoRgTable_IR12 
		|ON"; 
		
		//V8TblAli1_IR11._Fld20742RRef = _InfoRgTable_IR12._Fld20742RRef AND 
		ШаблонСтроки="V8TblAli1_IR11.%_ИмяПоля = _InfoRgTable_IR12.%_ИмяПоля AND";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса=ТекстЗапроса+"
		|V8TblAli1_IR11._MAXPERIOD = _InfoRgTable_IR12._Period AND";
		
		Если СоставнойРегистратор Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|V8TblAli1_IR11._MAXRECORDERTRef = _InfoRgTable_IR12._RecorderTRef AND" 
		КонецЕсли;
		
		ТекстЗапроса=ТекстЗапроса+"
		|V8TblAli1_IR11._MAXRECORDERRRef = _InfoRgTable_IR12._RecorderRRef
		|) V8TblAli1_Q_000_T_001 
		|UNION ALL
		|SELECT * FROM _InfoRgTable WHERE _InfoRgTable._Period > StartDate; -- записи остаются как есть
		|
		|truncate table _InfoRgTable; -- полная очистка регистра 
		|
		|insert into _InfoRgTable 
		|select * from TMP_InfoRgTable;";
	Иначе
		ТекстЗапроса="drop table IF EXISTS ##TMP_InfoRgTable;
		|SELECT  -- все поля РС;";
		
		//#V8TblAli1_Q_000_T_001._Period AS f_1,
		ШаблонСтроки="#V8TblAli1_Q_000_T_001.%_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			ТекстЗапроса=ТекстЗапроса+"
			|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
		КонецЦикла; 
		ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
		ТекстЗапроса=ТекстЗапроса+"
		|INTO ##TMP_InfoRgTable
		|FROM
		|(
		|SELECT												-- все поля РС";
		
		//_InfoRgTable_IR12._Fld20750 AS _Fld20750,
		ШаблонСтроки="_InfoRgTable_IR12.%_ИмяПоля AS %_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			ТекстЗапроса=ТекстЗапроса+"
			|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
		КонецЦикла; 
		ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
		ТекстЗапроса=ТекстЗапроса+"
		|FROM (
		|SELECT -- Измерения";
		
		//#V8TblAli1_IR1._Fld20742RRef AS _Fld20742RRef,,
		ШаблонСтроки="#V8TblAli1_IR1.%_ИмяПоля AS %_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		

		//ТекстЗапроса=ТекстЗапроса+"
		//|#V8TblAli1_IR1._MAXPERIOD AS _MAXPERIOD,
		//|SUBSTRING(MAX(_InfoRgTable_IR2._RecorderTRef + _InfoRgTable_IR2._RecorderRRef), 1, 4) AS _MAXRECORDERTRef,
		//|SUBSTRING(MAX(_InfoRgTable_IR2._RecorderTRef + _InfoRgTable_IR2._RecorderRRef), 5, 16) AS _MAXRECORDERRRef
		//|FROM (
		//|SELECT";
		
		Если СоставнойРегистратор Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|#V8TblAli1_IR1._MAXPERIOD AS _MAXPERIOD,
			|SUBSTRING(MAX(_InfoRgTable_IR2._RecorderTRef +  _InfoRgTable_IR2._RecorderRRef), 1, 4) AS _MAXRECORDERTRef,
			|SUBSTRING(MAX(_InfoRgTable_IR2._RecorderTRef +  _InfoRgTable_IR2._RecorderRRef), 5, 16) AS _MAXRECORDERRRef
			|FROM (
			|SELECT";
		Иначе
			ТекстЗапроса=ТекстЗапроса+"
			|#V8TblAli1_IR1._MAXPERIOD AS _MAXPERIOD,
			|MAX(_InfoRgTable_IR2._RecorderRRef) AS _MAXRECORDERRRef
			|FROM (
			|SELECT";
		КонецЕсли;
		
		//_InfoRgTable._Fld20742RRef AS _Fld20742RRef,
		ШаблонСтроки="_InfoRgTable.%_ИмяПоля AS %_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса=ТекстЗапроса+"
		|MAX(_InfoRgTable._Period) AS _MAXPERIOD
		|FROM
		|_InfoRgTable WITH(NOLOCK)
		|WHERE
		|_InfoRgTable._Period <=  @StartDate AND _InfoRgTable._Active = 1
		|GROUP BY";
		
		//_InfoRgTable._Fld20742RRef,
		ШаблонСтроки="_InfoRgTable.%_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса=Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);
		
		ТекстЗапроса=ТекстЗапроса+"
		|) #V8TblAli1_IR1
		|INNER JOIN _InfoRgTable _InfoRgTable_IR2 WITH(NOLOCK)
		|ON";
		
		//#V8TblAli1_IR1._Fld20747RRef = _InfoRgTable_IR2._Fld20747RRef AND 
		ШаблонСтроки="#V8TblAli1_IR1.%_ИмяПоля = _InfoRgTable_IR2.%_ИмяПоля AND";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		
		ТекстЗапроса=ТекстЗапроса+" 
		|#V8TblAli1_IR1._MAXPERIOD = _InfoRgTable_IR2._Period
		|WHERE
		|_InfoRgTable_IR2._Active = 1
		|GROUP BY";
		
		//#V8TblAli1_IR1._Fld20742RRef,
		ШаблонСтроки="#V8TblAli1_IR1.%_ИмяПоля,";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса=ТекстЗапроса+" 
		|#V8TblAli1_IR1._MAXPERIOD
		|) #V8TblAli1_IR11
		|INNER JOIN _InfoRgTable _InfoRgTable_IR12 WITH(NOLOCK)
		|ON"; 
		
		//#V8TblAli1_IR11._Fld20742RRef = _InfoRgTable_IR12._Fld20742RRef AND 
		ШаблонСтроки="#V8TblAli1_IR11.%_ИмяПоля = _InfoRgTable_IR12.%_ИмяПоля AND";
		Для каждого Поле Из ТаблицаПолей Цикл
			МетаданныеПоля=Поле.Метаданные;
			Если СтрЧислоВхождений(МетаданныеПоля,".Измерение.") >0 И Поле.ИмяПоляХранения <> "_Period" Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|"+СтрЗаменить(ШаблонСтроки,"%_ИмяПоля",Поле.ИмяПоляХранения);
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса=ТекстЗапроса+"
		|#V8TblAli1_IR11._MAXPERIOD = _InfoRgTable_IR12._Period AND";
		
		Если СоставнойРегистратор Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|#V8TblAli1_IR11._MAXRECORDERTRef = _InfoRgTable_IR12._RecorderTRef AND" 
		КонецЕсли;

		ТекстЗапроса=ТекстЗапроса+"
		|#V8TblAli1_IR11._MAXRECORDERRRef = _InfoRgTable_IR12._RecorderRRef
		|) #V8TblAli1_Q_000_T_001 
		|UNION ALL
		|SELECT * FROM _InfoRgTable WHERE _InfoRgTable._Period > @StartDate; -- записи остаются как есть
		|
		|truncate table _InfoRgTable; -- полная очистка регистра 
		|
		|insert into _InfoRgTable 
		|select * from ##TMP_InfoRgTable;";
	КонецЕсли;
	
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"_InfoRgTable",ТаблицаРС);
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДополнитьЗапросНезависимыйРС(СтрокаРегистра,ТекстЗапроса)
	МассивМД=Новый Массив;
	МДРегистра=Метаданные.РегистрыСведений[СтрокаРегистра.Регистр];
	МассивМД.Добавить(МДРегистра);
	ТЗСтруктуры=ПолучитьСтруктуруХраненияБазыДанных(МассивМД,истина);
    СтрокаОсновная = ТЗСтруктуры.найти("Основная","Назначение");
	Если СтрокаОсновная <> Неопределено Тогда
		Если МДРегистра.ПериодичностьРегистраСведений=Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
			ЗапросРС=ШаблонЗапросаДЛяРССРегистратором(СтрокаОсновная.ИмяТаблицыХранения,СтрокаОсновная.Поля);
		Иначе
			ЗапросРС=ШаблонЗапросаДЛяНезависимогоРС(СтрокаОсновная.ИмяТаблицыХранения,СтрокаОсновная.Поля);
		КонецЕсли; 
		ТекстЗапроса.добавитьСтроку(ЗапросРС);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти
